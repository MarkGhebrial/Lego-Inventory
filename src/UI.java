import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;

public class UI extends JFrame {

	private JPanel contentPane;
	private JTextField nameBox;
	private JComboBox colorBox;
	private JSpinner qtySpinner;
	private JTable table;
	
	public ListKeeper list;
	
	String[] header = {"Name", "Color", "Qty"};

	/**
	 * Create the frame.
	 */
	public UI() {
		// Create the object that will handle the list as well as reading and writing to the file
		try {
			list = new ListKeeper();
		} catch (IOException e) {
			System.out.println("Error loading from disk");
			e.printStackTrace();
		}
		
		/*
		 * Most of this GUI code was generated by the Eclipse WindowBuilder plugin
		 */
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 650, 500);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		GridBagLayout gbl_contentPane = new GridBagLayout();
		gbl_contentPane.columnWidths = new int[]{0, 0};
		gbl_contentPane.rowHeights = new int[] {33};
		gbl_contentPane.columnWeights = new double[]{1.0, Double.MIN_VALUE};
		gbl_contentPane.rowWeights = new double[]{0.0, 1.0};
		contentPane.setLayout(gbl_contentPane);
		
		JPanel entryPanel = new JPanel();
		GridBagConstraints gbc_entryPanel = new GridBagConstraints();
		gbc_entryPanel.insets = new Insets(0, 0, 5, 0);
		gbc_entryPanel.fill = GridBagConstraints.BOTH;
		gbc_entryPanel.gridx = 0;
		gbc_entryPanel.gridy = 0;
		contentPane.add(entryPanel, gbc_entryPanel);
		GridBagLayout gbl_entryPanel = new GridBagLayout();
		gbl_entryPanel.columnWidths = new int[] {156, 0, 70, 0, 0, 0};
		gbl_entryPanel.rowHeights = new int[]{0, 0};
		gbl_entryPanel.columnWeights = new double[]{1.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_entryPanel.rowWeights = new double[]{0.0, Double.MIN_VALUE};
		entryPanel.setLayout(gbl_entryPanel);
		
		nameBox = new JTextField();
		nameBox.setToolTipText("Enter the name of the part to be added");
		nameBox.setText("Name");
		GridBagConstraints gbc_nameBox = new GridBagConstraints();
		gbc_nameBox.insets = new Insets(0, 0, 0, 5);
		gbc_nameBox.fill = GridBagConstraints.HORIZONTAL;
		gbc_nameBox.gridx = 0;
		gbc_nameBox.gridy = 0;
		entryPanel.add(nameBox, gbc_nameBox);
		nameBox.setColumns(10);
		GridBagConstraints gbc_colorBox = new GridBagConstraints();
		gbc_colorBox.insets = new Insets(0, 0, 0, 5);
		gbc_colorBox.gridx = 1;
		gbc_colorBox.gridy = 0;
		colorBox = new JComboBox();
		colorBox.setToolTipText("Select the color of the part to be added");
		colorBox.setMaximumRowCount(50);
		entryPanel.add(colorBox, gbc_colorBox);
		colorBox.setModel(new DefaultComboBoxModel(Colors.values()));
		
		qtySpinner = new JSpinner();
		qtySpinner.setToolTipText("Enter the quantity of the part to be added");
		GridBagConstraints gbc_qtySpinner = new GridBagConstraints();
		gbc_qtySpinner.gridwidth = 2;
		gbc_qtySpinner.fill = GridBagConstraints.HORIZONTAL;
		gbc_qtySpinner.insets = new Insets(0, 0, 0, 5);
		gbc_qtySpinner.gridx = 2;
		gbc_qtySpinner.gridy = 0;
		entryPanel.add(qtySpinner, gbc_qtySpinner);
		
		JButton newButton = new JButton("Add Part");
		newButton.addActionListener(new ButtonListener());
		GridBagConstraints gbc_newButton = new GridBagConstraints();
		gbc_newButton.insets = new Insets(0, 0, 0, 5);
		gbc_newButton.gridx = 4;
		gbc_newButton.gridy = 0;
		entryPanel.add(newButton, gbc_newButton);
		
		JPanel tablePanel = new JPanel();
		GridBagConstraints gbc_tablePanel = new GridBagConstraints();
		gbc_tablePanel.fill = GridBagConstraints.BOTH;
		gbc_tablePanel.gridx = 0;
		gbc_tablePanel.gridy = 1;
		contentPane.add(tablePanel, gbc_tablePanel);
		
		tablePanel.setLayout(new GridLayout(0, 1, 0, 0));
		
		JScrollPane scrollPane = new JScrollPane();
		tablePanel.add(scrollPane);
		table = new JTable(new InventoryTableModel());
		scrollPane.setViewportView(table);
		table.setFont(new Font("Lucida Grande", Font.PLAIN, 12));
		table.setCellSelectionEnabled(true);
		table.setShowHorizontalLines(true);
		table.getModel().addTableModelListener(new TableListener());
	}

	private class ButtonListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			if ((int)qtySpinner.getValue() != 0) {
				//Add an item to the list with the values entered by the user
				list.addItem(new ListItem(nameBox.getText(), (Colors)colorBox.getSelectedItem(), (int)qtySpinner.getValue()));
				list.saveToDisk();
				table.updateUI();
			}
		}
	}
	
	private class TableListener implements TableModelListener {
		@Override
		public void tableChanged(TableModelEvent e) {
			System.out.println("table event fired");
		}
	}
	
	private class InventoryTableModel extends AbstractTableModel {

		@Override
		public int getRowCount() {
			return list.getLength();
		}

		@Override
		public int getColumnCount() {
			return 3;
		}

		@Override
		public String getColumnName(int columnIndex) {
			return header[columnIndex];
		}

		@Override
		public Class<?> getColumnClass(int columnIndex) {
			return list.getItem(0).getClass();
		}

		@Override
		public boolean isCellEditable(int rowIndex, int columnIndex) {
			return columnIndex == 2;
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			return ((ListItem) list.getItem(rowIndex)).getValues()[columnIndex];
		}

		@Override
		public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
			if (columnIndex == 0) {
				list.getItem(rowIndex).name = (String) aValue;
			} else if (columnIndex == 1) {
				list.getItem(rowIndex).color = (Colors) aValue;
			} else if (columnIndex == 2) {
				list.getItem(rowIndex).qty = (int) aValue;
			}
		}
	}
}
